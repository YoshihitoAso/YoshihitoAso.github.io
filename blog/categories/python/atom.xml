<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | /var/log/aso.log]]></title>
  <link href="http://yoshihitoaso.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://yoshihitoaso.github.io/"/>
  <updated>2014-09-01T18:50:03+09:00</updated>
  <id>http://yoshihitoaso.github.io/</id>
  <author>
    <name><![CDATA[Yoshihito Aso]]></name>
    <email><![CDATA[yoshihito.asoh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PythonからHiveServer2に接続する方法]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/08/27/pyhs2/"/>
    <updated>2014-08-27T15:15:50+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/08/27/pyhs2</id>
    <content type="html"><![CDATA[<p>PythonからHiveQLを実行したかったので、HiveServerを利用しました。</p>

<p>簡単な設定のメモ書きを残しておきます。</p>

<!-- more -->


<h2>HiveServer2について</h2>

<p>自分は以下の資料などを利用して理解を深めていった。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/28060369" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/schubertzhang/hiveserver2" title="HiveServer2" target="_blank">HiveServer2</a> </strong> from <strong><a href="http://www.slideshare.net/schubertzhang" target="_blank">Schubert Zhang</a></strong> </div></p>

<p>Clientについてはオフィシャルから。</p>

<p><a href="https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients">HiveServer2 Clients - Apache Hive - Apache Software Foundation</a></p>

<h2>HiveServer2の起動</h2>

<p>CDH4をインストール済みであれば、HiveServer2の起動は以下のようにして行える。
<code>
$ service hive-server2 start
</code></p>

<p>jpsで起動状態の確認を行う。
&#8220;`</p>

<h1>jps</h1>

<p>:
:
2901 RunJar　←HiveServer2のプロセス
:
&#8220;`</p>

<h2>PythonからHiveServer2に接続（pyhs2）</h2>

<p>PythonからHiveServer2に接続して操作するためには、HiveSever2用クライアントドライバをインストールする必要がある。</p>

<p>オフィシャルドキュメント（ <a href="https://cwiki.apache.org/confluence/display/Hive/Setting+Up+HiveServer2#SettingUpHiveServer2-PythonClientDriver">https://cwiki.apache.org/confluence/display/Hive/Setting+Up+HiveServer2#SettingUpHiveServer2-PythonClientDriver</a> ）にそって、ここではpyhs2を利用することにする。</p>

<p>pyhs2のインストールはpipでOK。
<code>
$ pip install pyhs2
</code></p>

<p>HiveServer2を起動した状態で以下の様なサンプルプログラム(thrift_sample.py)を動かしてみる。
&#8220;`</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding:utf-8 -</em>-</h1>

<p>import pyhs2</p>

<p>conn = pyhs2.connect(host=&lsquo;localhost&rsquo;,
                    port=10000,
                    authMechanism=&ldquo;PLAIN&rdquo;,
                    user=&lsquo;root&rsquo;,
                    password=&lsquo;test&rsquo;,
                    database=&lsquo;default&rsquo;)
cur = conn.cursor()
cur.execute(&ldquo;show tables&rdquo;)
for i in cur.fetch():
    print i
cur.close()
conn.close()
&#8220;`</p>

<p>しかし、今の状態だと以下の様なエラーが出ると思われる。
<code>
$ python thrift_sample.py
Traceback (most recent call last):
  File "thrift_sample.py", line 27, in &lt;module&gt;
    database='default')
  File "/usr/local/lib/python2.7/dist-packages/pyhs2/__init__.py", line 6, in connect
    from .connections import Connection
  File "/usr/local/lib/python2.7/dist-packages/pyhs2/connections.py", line 6, in &lt;module&gt;
    import sasl
ImportError: No module named sasl
</code>
pyhs2の依存パッケージ（sasl）をインストールする必要がある。そのままsaslをpipでインストールしてみると以下のようなエラーが出るはず。
&#8220;`
$ pip install sasl
:
:
gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -Isasl -I/usr/include/python2.7 -c sasl/saslwrapper.cpp -o build/temp.linux-x86_64-2.7/sasl/saslwrapper.o</p>

<p>cc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]</p>

<p>sasl/saslwrapper.cpp:21:23: fatal error: sasl/sasl.h: No such file or directory</p>

<p>compilation terminated.</p>

<p>error: command &lsquo;gcc&rsquo; failed with exit status 1
:
&#8220;`</p>

<p>libsasl2-devをインストールする必要がある。
<code>
$ sudo apt-get install libsasl2-dev
</code></p>

<p>もう一度実行⇒OK
<code>
$ pip install sasl
</code></p>

<p>これでもう一度上記のサンプルプログラム（thrift_sample.py）を実行すればうまく動く（はず）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonからMongoDBを操作する]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/08/27/pymongo/"/>
    <updated>2014-08-27T13:14:26+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/08/27/pymongo</id>
    <content type="html"><![CDATA[<p><a href="http://yoshihitoaso.github.io/blog/2014/08/20/ubuntu-mongo/">以前</a>、Ubuntu上にMongoDBをインストールしてみました。</p>

<p>今回は、MongoDBをPythonから操作する方法についてまとめておくことにします。</p>

<!-- more -->


<h2>PyMongoのインストール方法</h2>

<p>pythonから利用するためのモジュールとしてPyMongoを利用します。</p>

<p>インストール方法は簡単で、pipであれば以下でOK。
<code>
$ pip install pymongo
</code></p>

<h2>サンプル</h2>

<p>pymongoを利用したMongoDB接続のサンプル（localhost接続の例）</p>

<p>①検索（find）
&#8220;`</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding:utf-8 -</em>-</h1>

<p>from pymongo import Connection</p>

<h1>コネクション作成</h1>

<p>con = Connection(&lsquo;localhost&rsquo;, 27017)</p>

<h1>コネクションからsampleデータベースを取得</h1>

<p>db = con.sample</p>

<h1>sampleデータベースからfooコレクションを取得</h1>

<p>col = db.foo</p>

<p>print &ldquo;========find_one========&rdquo;
print col.find_one()</p>

<p>print &ldquo;========find========&rdquo;
for data in col.find():
    print data</p>

<p>print &ldquo;========find_query========&rdquo;
for data in col.find({u&#8217;a&#8217;:10}):
    print data
&#8220;`</p>

<p>②データの登録（insert）
&#8220;`</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding:utf-8 -</em>-</h1>

<p>from pymongo import Connection</p>

<h1>コネクション作成</h1>

<p>con = Connection(&lsquo;localhost&rsquo;, 27017)</p>

<h1>コネクションからsampleデータベースを取得</h1>

<p>db = con.sample</p>

<h1>sampleデータベースからfooコレクションを取得</h1>

<p>col = db.foo</p>

<h1>データの更新</h1>

<p>col.insert({&lsquo;b&rsquo; : 10})</p>

<p>for data in col.find({&lsquo;b&rsquo;:10}):
    print data
&#8220;`
※ちなみにinsertは何度でも実行可能。その場合、レコード単位に新たなObjectIdが付与される。</p>

<p>③更新
&#8220;`</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding:utf-8 -</em>-</h1>

<p>from pymongo import Connection</p>

<h1>コネクション作成</h1>

<p>con = Connection(&lsquo;localhost&rsquo;, 27017)</p>

<h1>コネクションからsampleデータベースを取得</h1>

<p>db = con.sample</p>

<h1>sampleデータベースからfooコレクションを取得</h1>

<p>col = db.foo</p>

<p>data = col.find_one({&lsquo;b&rsquo;:10})
data[&lsquo;b&rsquo;] = 11</p>

<h1>データの更新</h1>

<p>col.save(data)</p>

<p>for data in col.find({u&#8217;b&#8217;:11}):
    print data</p>

<p>con.disconnect()
<code>
④データの削除(remove)
</code></p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding:utf-8 -</em>-</h1>

<p>from pymongo import Connection</p>

<h1>コネクション作成</h1>

<p>con = Connection(&lsquo;localhost&rsquo;, 27017)</p>

<h1>コネクションからsampleデータベースを取得</h1>

<p>db = con.sample</p>

<h1>sampleデータベースからfooコレクションを取得</h1>

<p>col = db.foo</p>

<p>print &ldquo;===before===&rdquo;
for data in col.find():
    print data</p>

<p>col.remove({&lsquo;b&rsquo;:11})</p>

<p>print &ldquo;===after===&rdquo;
for data in col.find():
    print data</p>

<p>con.disconnect()
&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pyqueryでWebスクレイピング]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/08/25/pyquery/"/>
    <updated>2014-08-25T20:15:05+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/08/25/pyquery</id>
    <content type="html"><![CDATA[<p>pyqueryを使ってスクレイピングしてみた時のメモ。以下のサイトを参考にした。</p>

<p>1) <a href="http://tnakamura.hatenablog.com/entry/20110602/python_scraping_pyquery">PyQuery で再びスクレイピング入門 - present</a></p>

<p>2) GitHub: <a href="https://github.com/gawel/pyquery/">gawel/pyquery</a></p>

<!-- more -->


<h2>インストール</h2>

<p>pipでインストール
<code>
pip install pyquery
</code></p>

<p>でOK。pyqueryが依存しているlxmlもあわせてインストールされる。</p>

<h2>使い方</h2>

<p>使い方は簡単で、jquery的に、
&#8220;`
from pyquery import PyQuery
q = PyQuery(url=&lsquo;<a href="http://b.hatena.ne.jp/">http://b.hatena.ne.jp/</a>&rsquo;)</p>

<p>for elem in q.find(&lsquo;a.entry-link&rsquo;):</p>

<h1>PyQuery</h1>

<pre><code>q2 = PyQuery(elem)
print q2.text()
print q2.attr('href')
</code></pre>

<h1>lxml</h1>

<h1>print elem.text</h1>

<h1>print elem.get(&lsquo;href&rsquo;)</h1>

<p>&#8220;`
こんな感じで使える。</p>

<p>短いけど以上。</p>
]]></content>
  </entry>
  
</feed>

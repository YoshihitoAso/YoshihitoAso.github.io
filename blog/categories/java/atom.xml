<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | /var/log/aso.log]]></title>
  <link href="http://yoshihitoaso.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yoshihitoaso.github.io/"/>
  <updated>2014-09-04T11:29:12+09:00</updated>
  <id>http://yoshihitoaso.github.io/</id>
  <author>
    <name><![CDATA[Yoshihito Aso]]></name>
    <email><![CDATA[yoshihito.asoh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04 に Maven3 をインストールする]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/09/04/ubuntu-maven3/"/>
    <updated>2014-09-04T11:00:12+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/09/04/ubuntu-maven3</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04 に Maven3 (※2ではなく3)をインストールした時のメモ。</p>

<p>※参考：OS情報
<code>
$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION="Ubuntu 12.04.5 LTS"
</code></p>

<!-- more -->


<p>バージョンは12.04でDistributionはpreciseである。</p>

<pre><code>$ apt-cache policy maven
maven:
  Installed: 3.0.4-2
  Candidate: 3.0.4-2
  Version table:
 *** 3.0.4-2 0
        500 http://archive.ubuntu.com/ubuntu/ precise/universe amd64 Packages
        100 /var/lib/dpkg/status
</code></pre>

<p>上記の通り、要はdefaultはmaven3のようだ。</p>

<p>つまりこのバージョンでは単純に、
<code>
$ sudo apt-get inatall maven
</code>
でOKということのようだ。</p>

<h4>※補足</h4>

<pre><code>$ apt-cache policy maven
....
maven - Java software project management and comprehension tool
maven-debian-helper - Helper tools for building Debian packages with Maven
maven2 - Java software project management and comprehension tool
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuでJava appを作成してみる]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/09/03/heroku-java-app-demo/"/>
    <updated>2014-09-03T18:33:19+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/09/03/heroku-java-app-demo</id>
    <content type="html"><![CDATA[<p>Heroku上でJavaのアプリケーションを動かしたくなった。</p>

<p>公式チュートリアルに沿って流れを確認してみたのでメモ。</p>

<p>だいたいの流れは公式のドキュメント（英語）のまま。</p>

<blockquote><p>Getting Started with Java on Heroku</p>

<p><a href="https://devcenter.heroku.com/articles/getting-started-with-java">https://devcenter.heroku.com/articles/getting-started-with-java</a></p></blockquote>

<!-- more -->


<h2>Introduction: イントロ</h2>

<p>以下の準備が整っている前提。</p>

<ul>
<li>Herokuアカウントを作成する</li>
<li>Maven3インストール済み開発環境</li>
</ul>


<h2>Set up: セットアップ</h2>

<p>開発環境の初期セットアップを行っていく。</p>

<h4>Heroku Toolbeltのインストール</h4>

<p>ローカルの開発環境からHerokuをコントロールするために、開発環境にHerokuToolbeltをインストールする。</p>

<p>ここの手順は環境によって異なる。以下はUbuntuの場合。</p>

<pre><code>$ wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
$ heroku login
Enter your Heroku credentials.
Email: hoge@hoge.com
Password (typing will be hidden):
Authentication successful.
</code></pre>

<p>SSH公開鍵を登録する。</p>

<pre><code>$ ssh-keygen -t rsa
$ heroku keys:add ~/.ssh/id_rsa.pub
</code></pre>

<h4>ログイン</h4>

<p>Herokuにログインする。</p>

<pre><code>$ heroku login
Enter your Heroku credentials.
Email: hoge@hoge.com
Password (typing will be hidden):
Authentication successful.
</code></pre>

<h2>Prepare the app: サンプルアプリケーションの準備</h2>

<p>Herokuが準備したサンプルアプリケーションをgit cloneしてくる。</p>

<pre><code>$ git clone https://github.com/heroku/java-getting-started.git
$ cd java-getting-started
</code></pre>

<h2>Deploy the app: Heroku上にサンプルアプリケーションをデプロイ</h2>

<p>Heroku上にapp（プロジェクト）を作成する
<code>
$ heroku create
Creating ****... done, stack is cedar
http://****.herokuapp.com/ | git@heroku.com:****.git
Git remote heroku added
</code>
「****」の部分は作成時に自動的に付与される（あとからrenameも出来る）</p>

<p>アプリケーションのデプロイは以下のように行う。
<code>
$ git push heroku master
</code></p>

<p>appの実行環境（インスタンス）を1つに制限する場合は、以下のコマンドを実行しておく。
<code>
$ heroku ps:scale web=1
</code></p>

<p>ここまですると、<a href="http://****.herokuapp.com/">http://****.herokuapp.com/</a> にサンプルアプリケーションが公開された状態になる。</p>

<h2>View logs: ログを見る</h2>

<p>アプリケーションのログは以下のコマンドで参照可能。</p>

<pre><code>$ heroku logs --tail
</code></pre>

<h2>Define a Procfile: Procfileを定義する</h2>

<p>Procfileとは、Heroku appの動作方法（Process Model)を定義するファイル。</p>

<blockquote><p>Process Types and the Procfile | Heroku Dev Center</p>

<p><a href="https://devcenter.heroku.com/articles/procfile">https://devcenter.heroku.com/articles/procfile</a></p></blockquote>

<p>例えばRails3とかであれば、以下のように定義したりする。
<code>
web: bundle exec rails server -p $PORT
</code>
その他のサンプルも上記のリンクに書かれているので、参考になると思う。</p>

<p>サンプルアプリケーションでは以下のように定義する。
<code>
web: java $JAVA_OPTS -cp target/classes:target/dependency/* Main
</code></p>

<h2>Declare app dependencies: appの依存関係を宣言する</h2>

<p>Herokuはルートディレクトリにpom.xmlが存在することで、そのappがJavaであると判断する。</p>

<p>appがデプロイされると（git push heroku master）、Herokuはpom.xmlに記載されている依存モジュールをインストールする（mvn clean install）</p>

<pre><code>   &lt;dependency&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;
      &lt;version&gt;7.6.0.v20120127&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;postgresql&lt;/groupId&gt;
      &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
      &lt;version&gt;9.0-801.jdbc4&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>

<p>また、別のファイルでsystem.propertiesというファイルがあるが、これによりJavaのバージョンを指定する。</p>

<pre><code>java.runtime.version=1.7
</code></pre>

<p>ローカルディレクトリでアプリケーションを動かす場合も
<code>
$ mvn clean install
</code>
でアプリケーション実行環境が整う。</p>

<h2>Run the app locally: ローカル環境でappを実行する</h2>

<p>Toolbeltの一部として提供されているForemanを利用する（ちなみにRubyの1.8系では動かなかったので注意）。</p>

<pre><code>$ foreman start web
</code></pre>

<p>で、Procfileを読み込んでアプリケーションが起動する。</p>

<p>ブラウザなどからlocalhost:5000 にアクセスするとサンプルアプリケーションが起動していることを確認出来る。</p>

<h2>Push local changes: ローカルの変更内容を反映させる</h2>

<p>pom.xmlに依存モジュールを追加した場合は、Local環境で
<code>
$ mvn clean install
</code>
として、モジュールをインストールして直近化する。</p>

<p>ソース修正を行ったら、
<code>
$ foreman start web
</code>
して変更内容を確認する。</p>

<p>テスト等実施してOKだったらローカルの Git Repository に変更内容を反映させる。
<code>
$ git add .
$ git commit -m "Demo"
</code></p>

<p>GitHubなどリモートレポジトリが存在する場合は変更内容を反映させる。</p>

<p>最後にgit push して本番サービスに反映させる。
<code>
$ git push heroku master
</code></p>

<p>こんな感じで開発のサイクルを回していくっぽい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javaのバージョンを切り替える（Ubuntu）]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/09/01/change-the-java-version-on-ubuntu/"/>
    <updated>2014-09-01T14:00:24+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/09/01/change-the-java-version-on-ubuntu</id>
    <content type="html"><![CDATA[<p>前回（<a href="http://yoshihitoaso.github.io/blog/2014/09/01/ubuntu-jdk-install/">Ubuntu に JAVA7 (OpenJDK) をインストールする</a>）は説明を割愛したが、既に他のバージョンのJavaが入っている場合もある。</p>

<p>ということで、JDKのバージョンを切り替える手順をメモ。</p>

<!-- more -->


<h2>JDKのバージョンを切り替える</h2>

<p>例えば、既にJava6が入っているような場合を想定。</p>

<pre><code>$ java -version
java version "1.6.0_27"
OpenJDK Runtime Environment (IcedTea6 1.12.6) (6b27-1.12.6-1ubuntu0.12.04.4)
OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)
</code></pre>

<p>この状態で例えばJava7をインストールしてもその時点ではバージョンは切り替わらない。</p>

<p>以下のようにしてバージョンを切り替える。</p>

<pre><code>$ sudo update-alternatives --config java
There are 2 choices for the alternative java (providing /usr/bin/java).

  Selection    Path                                            Priority   Status
------------------------------------------------------------
  0            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      auto mode
  1            /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java   1061      manual mode
* 2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      manual mode

Press enter to keep the current choice[*], or type selection number:
</code></pre>

<p>最後に番号の入力を要求されるので、使いたいバージョンを指定する。</p>

<p>同様にjavacのバージョンを変更する。
<code>
$ sudo update-alternatives --config javac
</code></p>

<h2>バージョンを確認</h2>

<p>バージョンが切り替わっていることを確認する。
<code>
$ java -version
java version "1.7.0_65"
OpenJDK Runtime Environment (IcedTea 2.5.1) (7u65-2.5.1-4ubuntu1~0.12.04.2)
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</code></p>

<p>最後に、JAVA_HOMEなど環境変数で旧バージョンのPathを指定しているところがあれば、適宜修正を行う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu に JAVA7 (OpenJDK) をインストールする]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/09/01/ubuntu-jdk-install/"/>
    <updated>2014-09-01T13:48:57+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/09/01/ubuntu-jdk-install</id>
    <content type="html"><![CDATA[<p>UbuntuにJDKをセットアップする方法をメモ。</p>

<p>※参考情報：OSのバージョン</p>

<pre><code>$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.10
DISTRIB_CODENAME=quantal
DISTRIB_DESCRIPTION="Ubuntu 12.10"
</code></pre>

<!-- more -->


<h2>OpenJDK のパッケージを検索</h2>

<p>インストールを行うパッケージを検索する。
<code>
$ sudo apt-cache search openjdk
...
openjdk-7-jdk - OpenJDK Development Kit (JDK)
openjdk-7-jre - OpenJDK Java runtime, using Hotspot JIT
openjdk-7-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless)
openjdk-7-jre-zero - Alternative JVM for OpenJDK, using Zero/Shark
openjdk-7-source - OpenJDK Development Kit (JDK) source files
...
</code>
ここでは、openjdk-7-jdk、openjdk-7-jre、openjdk-7-source をインストールすることとする。</p>

<h2>インストール</h2>

<p>以下のとおりインストールする。
<code>
$ sudo apt-get install openjdk-7-jdk
$ sudo apt-get install openjdk-7-jre
$ sudo apt-get install openjdk-7-source
</code></p>

<h2>JAVA のバージョンを確認</h2>

<p>バージョンの確認を行う。
<code>
$ java -version
java version "1.7.0_65"
OpenJDK Runtime Environment (IcedTea 2.5.1) (7u65-2.5.1-4ubuntu1~0.12.04.2)
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
javac 1.7.0_65
</code></p>

<h2>環境変数の設定</h2>

<p>環境変数（JAVA_HOME）の設定は以下のように行った。Pathは若干異なる場合があると思う。
<code>
$ echo "export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64/\"" &gt;&gt; ~/.bashrc
$ source ~/.bashrc
</code></p>
]]></content>
  </entry>
  
</feed>

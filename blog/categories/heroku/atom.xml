<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | /var/log/aso.log]]></title>
  <link href="http://yoshihitoaso.github.io/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://yoshihitoaso.github.io/"/>
  <updated>2014-09-04T18:25:11+09:00</updated>
  <id>http://yoshihitoaso.github.io/</id>
  <author>
    <name><![CDATA[Yoshihito Aso]]></name>
    <email><![CDATA[yoshihito.asoh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HerokuでJava appを作成してみる]]></title>
    <link href="http://yoshihitoaso.github.io/blog/2014/09/03/heroku-java-app-demo/"/>
    <updated>2014-09-03T18:33:19+09:00</updated>
    <id>http://yoshihitoaso.github.io/blog/2014/09/03/heroku-java-app-demo</id>
    <content type="html"><![CDATA[<p>Heroku上でJavaのアプリケーションを動かしたくなった。</p>

<p>公式チュートリアルに沿って流れを確認してみたのでメモ。</p>

<p>だいたいの流れは公式のドキュメント（英語）のまま。</p>

<blockquote><p>Getting Started with Java on Heroku</p>

<p><a href="https://devcenter.heroku.com/articles/getting-started-with-java">https://devcenter.heroku.com/articles/getting-started-with-java</a></p></blockquote>

<!-- more -->


<h2>Introduction: イントロ</h2>

<p>以下の準備が整っている前提。</p>

<ul>
<li>Herokuアカウントを作成する</li>
<li>Maven3インストール済み開発環境</li>
</ul>


<h2>Set up: セットアップ</h2>

<p>開発環境の初期セットアップを行っていく。</p>

<h4>Heroku Toolbeltのインストール</h4>

<p>ローカルの開発環境からHerokuをコントロールするために、開発環境にHerokuToolbeltをインストールする。</p>

<p>ここの手順は環境によって異なる。以下はUbuntuの場合。</p>

<pre><code>$ wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
$ heroku login
Enter your Heroku credentials.
Email: hoge@hoge.com
Password (typing will be hidden):
Authentication successful.
</code></pre>

<p>SSH公開鍵を登録する。</p>

<pre><code>$ ssh-keygen -t rsa
$ heroku keys:add ~/.ssh/id_rsa.pub
</code></pre>

<h4>ログイン</h4>

<p>Herokuにログインする。</p>

<pre><code>$ heroku login
Enter your Heroku credentials.
Email: hoge@hoge.com
Password (typing will be hidden):
Authentication successful.
</code></pre>

<h2>Prepare the app: サンプルアプリケーションの準備</h2>

<p>Herokuが準備したサンプルアプリケーションをgit cloneしてくる。</p>

<pre><code>$ git clone https://github.com/heroku/java-getting-started.git
$ cd java-getting-started
</code></pre>

<h2>Deploy the app: Heroku上にサンプルアプリケーションをデプロイ</h2>

<p>Heroku上にapp（プロジェクト）を作成する
<code>
$ heroku create
Creating ****... done, stack is cedar
http://****.herokuapp.com/ | git@heroku.com:****.git
Git remote heroku added
</code>
「****」の部分は作成時に自動的に付与される（あとからrenameも出来る）</p>

<p>アプリケーションのデプロイは以下のように行う。
<code>
$ git push heroku master
</code></p>

<p>appの実行環境（インスタンス）を1つに制限する場合は、以下のコマンドを実行しておく。
<code>
$ heroku ps:scale web=1
</code></p>

<p>ここまですると、<a href="http://****.herokuapp.com/">http://****.herokuapp.com/</a> にサンプルアプリケーションが公開された状態になる。</p>

<h2>View logs: ログを見る</h2>

<p>アプリケーションのログは以下のコマンドで参照可能。</p>

<pre><code>$ heroku logs --tail
</code></pre>

<h2>Define a Procfile: Procfileを定義する</h2>

<p>Procfileとは、Heroku appの動作方法（Process Model)を定義するファイル。</p>

<blockquote><p>Process Types and the Procfile | Heroku Dev Center</p>

<p><a href="https://devcenter.heroku.com/articles/procfile">https://devcenter.heroku.com/articles/procfile</a></p></blockquote>

<p>例えばRails3とかであれば、以下のように定義したりする。
<code>
web: bundle exec rails server -p $PORT
</code>
その他のサンプルも上記のリンクに書かれているので、参考になると思う。</p>

<p>サンプルアプリケーションでは以下のように定義する。
<code>
web: java $JAVA_OPTS -cp target/classes:target/dependency/* Main
</code></p>

<h2>Declare app dependencies: appの依存関係を宣言する</h2>

<p>Herokuはルートディレクトリにpom.xmlが存在することで、そのappがJavaであると判断する。</p>

<p>appがデプロイされると（git push heroku master）、Herokuはpom.xmlに記載されている依存モジュールをインストールする（mvn clean install）</p>

<pre><code>   &lt;dependency&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;
      &lt;version&gt;7.6.0.v20120127&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;postgresql&lt;/groupId&gt;
      &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
      &lt;version&gt;9.0-801.jdbc4&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>

<p>また、別のファイルでsystem.propertiesというファイルがあるが、これによりJavaのバージョンを指定する。</p>

<pre><code>java.runtime.version=1.7
</code></pre>

<p>ローカルディレクトリでアプリケーションを動かす場合も
<code>
$ mvn clean install
</code>
でアプリケーション実行環境が整う。</p>

<h2>Run the app locally: ローカル環境でappを実行する</h2>

<p>Toolbeltの一部として提供されているForemanを利用する（ちなみにRubyの1.8系では動かなかったので注意）。</p>

<pre><code>$ foreman start web
</code></pre>

<p>で、Procfileを読み込んでアプリケーションが起動する。</p>

<p>ブラウザなどからlocalhost:5000 にアクセスするとサンプルアプリケーションが起動していることを確認出来る。</p>

<h2>Push local changes: ローカルの変更内容を反映させる</h2>

<p>pom.xmlに依存モジュールを追加した場合は、Local環境で
<code>
$ mvn clean install
</code>
として、モジュールをインストールして直近化する。</p>

<p>ソース修正を行ったら、
<code>
$ foreman start web
</code>
して変更内容を確認する。</p>

<p>テスト等実施してOKだったらローカルの Git Repository に変更内容を反映させる。
<code>
$ git add .
$ git commit -m "Demo"
</code></p>

<p>GitHubなどリモートレポジトリが存在する場合は変更内容を反映させる。</p>

<p>最後にgit push して本番サービスに反映させる。
<code>
$ git push heroku master
</code></p>

<p>こんな感じで開発のサイクルを回していくっぽい。</p>
]]></content>
  </entry>
  
</feed>
